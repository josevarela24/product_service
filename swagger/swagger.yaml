swagger: '2.0'
info:
  title: Product Shop Example API
  version: "1.0.0"
  description: Simple example API to store and retrieve products
  x-audience: external-public
  x-api-id: d2b9be12-eb8b-4d16-83a9-178c8144aedf
consumes:
  - application/json
produces:
  - application/json
#security:
  # enable OAuth protection for all REST endpoints
  # (only active if the TOKENINFO_URL environment variable is set)
  #- oauth2: [uid]
paths:
  /health:
    get:
      tags: [Health]
      operationId: api.products.get_health
      summary: Health check
      responses:
        200:
          description: Healthy
  /products:
    get:
      tags: [Products]
      operationId: api.products.get_products
      summary: Get all products
      parameters:
        - name: product_type
          in: query
          type: string
          pattern: "^[a-zA-Z0-9]*$"
        - name: limit
          in: query
          type: integer
          format: int32
          minimum: 0
          default: 100
      responses:
        200:
          description: Return products
          schema:
            type: object
            properties:
              products:
                type: array
                items:
                  $ref: '#/definitions/Product'
  /products/{product_id}:
    get:
      tags: [Products]
      operationId: api.products.get_product
      summary: Get a single product
      parameters:
        - $ref: '#/parameters/product_id'
      responses:
        200:
          description: Return product
          schema:
            $ref: '#/definitions/Product'
        404:
          description: Product does not exist
    put:
      tags: [Products]
      operationId: api.products.put_product
      summary: Create or update a product
      parameters:
        - $ref: '#/parameters/product_id'
        - name: product
          in: body
          schema:
            $ref: '#/definitions/Product'
      responses:
        200:
          description: Product updated
        201:
          description: New product created
    delete:
      tags: [Products]
      operationId: api.products.delete_product
      summary: Remove a product
      parameters:
        - $ref: '#/parameters/product_id'
      responses:
        204:
          description: Product was deleted
        404:
          description: Product does not exist


parameters:
  product_id:
    name: product_id
    description: Product's Unique identifier
    in: path
    type: string
    required: true
    pattern: "^[a-zA-Z0-9-]+$"

definitions:
  Product:
    type: object
    required:
      - name
      - product_type
    properties:
      id:
        type: string
        description: Unique identifier
        example: "123"
        readOnly: true
      name:
        type: string
        description: Product's name
        example: "Gucci Belt"
        minLength: 1
        maxLength: 100
      product_type:
        type: string
        description: Kind of product
        example: "clothing"
        minLength: 1
      tags:
        type: object
        description: Custom tags
      created:
        type: string
        format: date-time
        description: Creation time
        example: "2015-07-07T15:49:51.230+02:00"
        readOnly: true


securityDefinitions:
  oauth2:
    type: oauth2
    flow: implicit
    authorizationUrl: https://example.com/oauth2/dialog
    scopes:
      uid: Unique identifier of the user accessing the service.
